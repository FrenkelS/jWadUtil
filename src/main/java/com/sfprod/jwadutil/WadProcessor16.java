package com.sfprod.jwadutil;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

import com.sfprod.jwadutil.WadFile.Lump;

class WadProcessor16 extends WadProcessor {

	private static final int VGA256_TO_16_LUT[] = { //
			0x00, 0x06, 0x00, 0x07, 0xff, 0x08, 0x08, 0x00, 0x00, 0x88, 0x08, 0x08, 0x00, 0x68, 0x68, 0x68, //
			0xff, 0xff, 0x7f, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0xcc, 0xcc, //
			0xcc, 0xcc, 0x6c, 0x4c, 0x4c, 0x4c, 0x0c, 0x0c, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x04, 0x04, //
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xef, 0xef, 0xef, 0xef, 0x7e, 0x7e, 0x7e, 0xce, 0xce, //
			0xce, 0xce, 0xce, 0xce, 0x4e, 0x4e, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x68, 0x68, 0x68, 0x06, 0x06, //
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, //
			0x8f, 0x8f, 0x0f, 0x77, 0x77, 0x77, 0x78, 0x78, 0x78, 0x07, 0x07, 0x07, 0x88, 0x88, 0x88, 0x08, //
			0xaf, 0x3e, 0x7a, 0x7a, 0x7a, 0x7a, 0xaa, 0x8a, 0x8a, 0x8a, 0x0a, 0x28, 0x28, 0x02, 0x02, 0x00, //
			0x7f, 0x7f, 0xcf, 0x6f, 0x6f, 0x6f, 0x5e, 0x5e, 0x5e, 0x3c, 0x3c, 0x67, 0x67, 0x47, 0x68, 0x68, //
			0x5e, 0x5e, 0x5e, 0x67, 0x2c, 0x2c, 0x68, 0x68, 0x1e, 0x1e, 0x1e, 0x27, 0x36, 0x36, 0x88, 0x88, //
			0xef, 0xee, 0xee, 0xce, 0x6e, 0x4e, 0x66, 0x66, 0xff, 0xff, 0xff, 0x7f, 0xcf, 0x7c, 0xcc, 0x4c, //
			0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x04, //
			0xff, 0xff, 0xff, 0x9f, 0x9f, 0x79, 0x99, 0x19, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, //
			0xff, 0xff, 0xff, 0xef, 0xef, 0x7e, 0xce, 0x6e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x6c, 0x6c, 0x6c, //
			0xff, 0xff, 0xff, 0xef, 0xef, 0xee, 0xee, 0xee, 0x6c, 0x6c, 0x66, 0x46, 0x68, 0x68, 0x06, 0x06, //
			0x11, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0xee, 0xee, 0xdf, 0x5d, 0x5d, 0x5d, 0x55, 0x4f };

	WadProcessor16(WadFile wadFile) {
		super(wadFile);
	}

	@Override
	void processColorSpecific() {
		changePalette();
		processColormap();
	}

	private byte convert256to16(byte b) {
		return (byte) VGA256_TO_16_LUT[b & 0xff];
	}

	private void changePalette() {
		// Raw graphics
		changePaletteRaw(wadFile.getLumpByName("HELP2"));
		changePaletteRaw(wadFile.getLumpByName("STBAR"));
		changePaletteRaw(wadFile.getLumpByName("TITLEPIC"));
		changePaletteRaw(wadFile.getLumpByName("WIMAP0"));

		List<Lump> flats = wadFile.getLumpsBetween("F1_START", "F1_END");
		flats.forEach(this::changePaletteRaw);

		// Graphics
		List<Lump> graphics = new ArrayList<>(256);
		// Status bar
		graphics.addAll(wadFile.getLumpsByName("STC"));
		graphics.addAll(wadFile.getLumpsByName("STF"));
		graphics.addAll(wadFile.getLumpsByName("STG"));
		graphics.addAll(wadFile.getLumpsByName("STK"));
		graphics.addAll(wadFile.getLumpsByName("STY"));
		// Menu
		graphics.addAll(
				wadFile.getLumpsByName("M_").stream().filter(l -> !l.nameAsString().startsWith("M_LS")).toList());
		// Intermission
		graphics.addAll(wadFile.getLumpsByName("WI").stream().filter(l -> !"WIMAP0".equals(l.nameAsString())).toList());
		// Sprites
		graphics.addAll(wadFile.getLumpsBetween("S_START", "S_END"));
		// Walls
		graphics.addAll(wadFile.getLumpsBetween("P1_START", "P1_END"));
		graphics.forEach(this::changePalettePicture);
	}

	private void changePaletteRaw(Lump lump) {
		for (int i = 0; i < lump.data().length; i++) {
			lump.data()[i] = convert256to16(lump.data()[i]);
		}
	}

	private void changePalettePicture(Lump lump) {
		ByteBuffer dataByteBuffer = lump.dataAsByteBuffer();
		short width = dataByteBuffer.getShort();
		dataByteBuffer.getShort(); // height
		dataByteBuffer.getShort(); // leftoffset
		dataByteBuffer.getShort(); // topoffset

		List<Integer> columnofs = new ArrayList<>();
		for (int columnof = 0; columnof < width; columnof++) {
			columnofs.add(dataByteBuffer.getInt());
		}

		for (int columnof = 0; columnof < width; columnof++) {
			int index = columnofs.get(columnof);
			byte topdelta = lump.data()[index];
			index++;
			while (topdelta != -1) {
				byte lengthByte = lump.data()[index];
				index++;
				int length = lengthByte & 0xff;
				for (int i = 0; i < length + 2; i++) {
					lump.data()[index] = convert256to16(lump.data()[index]);
					index++;
				}
				topdelta = lump.data()[index];
				index++;
			}
		}
	}

	private void processColormap() {
		Lump colormapLump = wadFile.getLumpByName("COLORMAP");

		int index = 0;
		int colormap = 0;

		// colormap 0-31
		while (colormap < 32) {
			for (int i = 0; i < 256; i++) {
				colormapLump.data()[index] = (byte) i;
				index++;
			}
			colormap++;
		}

		// colormap 32 invulnerability powerup
		int[] grayscaleFromDarkToLight = { 0x00, 0x08, 0x88, 0x07, 0x78, 0x77, 0x0f, 0x8f, 0x7f, 0xff };
		for (int i = 0; i < 256; i++) {
			colormapLump.data()[index] = (byte) grayscaleFromDarkToLight[i % 10];
			index++;
		}

		// colormap 33 all black
		for (int i = 0; i < 256; i++) {
			colormapLump.data()[index] = 0;
			index++;
		}
	}

}
